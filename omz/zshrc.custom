#!/usr/bin/env zsh
# vim: ft=sh: set this file to sh if using shellcheck linter

# oh-my-zsh args
CASE_SENSITIVE="true"
COMPLETION_WAITING_DOTS="true"
# DISABLE_AUTO_TITLE="true"
HIST_STAMPS="yyyy-mm-dd"
HYPHEN_INSENSITIVE="true"

### custom settings

# oh-my-zsh theme
ZSH_CUSTOM="$PROFILE_PATH/omz/custom"
ZSH_THEME="crunch_custom" # ; alias git=hub
# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(date context history dir vcs)
# POWERLEVEL9K_LOAD_WHICH=1
# POWERLEVEL9K_DATE_FORMAT="%D{%d|%H:%M:%S}"
# POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
# ZSH_THEME="powerlevel9k/powerlevel9k"


# skip_global_compinit=1
export TERM="xterm-256color"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

# add plugins=(osx) for the tab command, to command-click a vim file in new tab
# also need to add 'tab' in iterm2 profile/advanced semantic history
plugins=(aws command-time docker kubectl helm pip zsh-autosuggestions zsh-syntax-highlighting)

# fix
# https://github.com/robbyrussell/oh-my-zsh/issues/6835#issuecomment-390216875
ZSH_DISABLE_COMPFIX=true

# custom dir function path
fpath=($fpath /usr/local/share/zsh-completions)

# custom PATH stuff
export PATH_DEFAULT="$PATH" # needed for reloadZsh

[ -d $HOME/.local ] && export PATH="$PATH:$HOME/.local/bin" # needs to append for pyenv, because pip install --user
[ -d /usr/local/sbin ] && export PATH="$PATH:/usr/local/sbin"
[ -d /usr/libexec ] && export PATH="$PATH:/usr/libexec"
[ -d $HOME/scripts ] && export PATH="$PATH:$HOME/scripts"
[ -d $PROFILE_PATH/scripts ] && export PATH="$PATH:$PROFILE_PATH/scripts"
[ -d /snap/bin ] && export PATH="/snap/bin:$PATH"
[ -d /usr/local/bin ] && export PATH="/usr/local/bin:$PATH" # dsm
[ -d /usr/syno ] && export PATH="$PATH:/usr/syno/bin:/usr/syno/sbin" # dsm

source $ZSH/oh-my-zsh.sh

####################################

# additioanl profile settings

# ruby environment
command -v rbenv >/dev/null 2>&1 && \
    export RBENV_ROOT="$HOME/.rbenv" && \
    eval "$(rbenv init -)"

# python environment
command -v pyenv >/dev/null 2>&1 && \
    export PYENV_ROOT="$HOME/.pyenv" && \
    export PATH="$PYENV_ROOT/bin:$PATH" && \
    eval "$(pyenv init -)" && \
    # aws tab completion # source /usr/local/share/zsh/site-functions/_aws # if installed via brew
    # pyenv's built in which command to check for installed aws completer
    pyenv which aws_zsh_completer.sh 1>/dev/null 2>&1 && source "$(pyenv which aws_zsh_completer.sh)"

# go environment
command -v go >/dev/null 2>&1 && \
    export GOPATH="$HOME/go" && \
    PATH="$GOPATH/bin:$PATH"

# determine Mac or Linux OS
OS_TYPE=$(uname -s)
# linux specific
if [ "$OS_TYPE" = Linux ]; then
    alias apt='sudo apt'
    alias apts='apt search'
    alias docker='sudo docker'
    alias dc='sudo docker-compose'
    alias ls='ls --color=always'
    export QUOTING_STYLE=literal
    [ command -v microk8s.kubectl >/dev/null 2>&1 ] && alias kubectl=microk8s.kubectl
# mac specific
elif [ "$OS_TYPE" = Darwin ]; then
    alias ls='/usr/local/bin/gls --color=always'
    export HOMEBREW_NO_INSTALL_CLEANUP=true
    # mojave required these to be unset
    # CFLAGS="-I$(brew --prefix readline)/include -I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include"
    # LDFLAGS="-L$(brew --prefix readline)/lib -L$(brew --prefix openssl)/lib"
    # High Sierra
    # local HOMEBREW_OPENSSL="command -v openssl" # cause "$(brew --prefix openssl)" is super slow
    # export CFLAGS="-I$HOMEBREW_OPENSSL/include"
    # export LDFLAGS="-L$HOMEBREW_OPENSSL/lib"
fi

# handles special characters from links/urls
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# Bash-like navigation (alt left/right forward-word like bash)
# http://stackoverflow.com/questions/10847255/how-to-make-zsh-forward-word-behaviour-same-as-in-bash-emacs (man zshall)
autoload -U select-word-style
select-word-style bash
# bindkey mappings for zsh
# bindkey -v # vim mode
bindkey "^[OF" end-of-line
bindkey "^[OH" beginning-of-line
bindkey "^[OA" up-line-or-beginning-search
bindkey "^[OB" down-line-or-beginning-search
bindkey "^?" backward-delete-char
bindkey "^[[3~" delete-char
bindkey "^W" backward-kill-word
bindkey "^[^H" backward-kill-word
bindkey "^[B" backward-word
bindkey "^[F" forward-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "^[b" emacs-backward-word
bindkey "^[d" kill-word
bindkey "^[f" emacs-forward-word
bindkey "^[^?" backward-kill-word
bindkey "^[D" kill-word
bindkey "^[d" kill-word
bindkey "^[w" kill-region
bindkey "^[^[OA" up-line-or-beginning-search # fix for escape/up arrow annoyance
bindkey "^R" history-incremental-search-backward

# shellcheck linter
export SHELLCHECK_OPTS="-e SC1091 -e SC2059 -e SC2129"

# homebrew
# export HOMEBREW_CASK_OPTS="--appdir=~/Applications"

export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export LC_CTYPE="UTF-8"
export EDITOR="vim"

# hashicorp vault autocomplete
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/vault vault

# google cloud platform
# source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc
# source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc
# kubectl completion zsh > "${fpath[1]}/_kubectl"

# Vagrant / VirtualBox
# https://www.vagrantup.com/docs/other/environmental-variables.html
export VAGRANT_HOME="$HOME/.Vagrant" # (default location: ~/.vagrant.d)
[ -d "$VAGRANT_HOME" ] || mkdir -p "$VAGRANT_HOME" # create if path doesn't exist
# export VAGRANT_DEBUG_LAUNCHER="1" # outputs debugging
# export VAGRANT_DEFAULT_PROVIDER="virtualbox"

# functions
awkp(){
    # search returns paragraph around line with search value
    if [ $2 ]; then
        awk -v RS= "/$1/" $2
    else
        echo "use: awkp <thing_to_search> </path/to/file>"
    fi
}

gitBlameSort(){
    if [ ${1} ]; then
        git blame ${1} | sort -rbk 3 | less
    else
        echo "e.g. $0 /path/to/file"
    fi
}

peruseHistory ()
{
    if [ ! $1 ]; then
        fc -il 1
    elif [ $1 = '-l' ]; then
        fc -il 1 | grep "$2" | less
    else
        fc -il 1 | grep "$1"
    fi
}

python_http_server(){
    python -m SimpleHTTPServer
}

reloadZsh(){
    unalias -a # remove all aliases
    export PATH=$PATH_DEFAULT
    source "$PROFILE_PATH/omz/zshrc.custom"
}

update_janus(){
    JANUS=$HOME/.vim
    echo "updating vim-janus in $JANUS"
    cd $JANUS
    rake
    cd -
}


# aliases
alias D='cd ~/development'
alias N='cd ~/notes'
alias P='cd $PROFILE_PATH'
alias S='cd ~/scripts'
alias V='cd ~/vagrant'
alias 1p='source op_session.sh'
alias ack='ack --ackrc $PROFILE_PATH/ackrc'
alias ackg='ack -g' # check filenames for pattern
alias ackgw='ackg -w' # words mode, pattern can't be in another word
alias ackp=awkp # [FUNC] search returns paragraph around line with search value
alias acks='ack --noignore-dir=is:submodules/,tmp/,scott/' # will search submodules
alias acksg='acks -g' # filenames only, will search submodules
alias ackw='ack -w' # words mode, pattern can't be in another word
alias bz='bunzip2'
alias clr='clear'
alias cp='cp -a'
alias df='df -h'
alias dud='du -d 1 -h'
alias digs='dig $1 +short'
alias grep='grep -i --color=auto' # (case insensitive, color output)
alias h='helm'
alias hist='peruseHistory'
alias hl='peruseHistory -l'
alias hh='sudo vim /etc/hosts'
alias l.='ls -dh .*'
alias ll.='ls -ldh .*'
alias llt='ll -tr'
alias man=betterman
alias pep8="pep8 -v"
alias bep8="bashate"
alias publicip='dig +short myip.opendns.com @resolver1.opendns.com'
alias rar='unrar'
alias rr='rsync -avhP'
alias rrd='rsync -avhP --delete'
alias scr='screen -dR'
alias top='htop'
alias vi='vim'
alias vvv='vim ~/.vimrc'
alias vva='vim ~/.vimrc.after'
alias vvb='vim ~/.vimrc.before'
alias zedit='vim $ZSH_CUSTOM/themes/crunch_custom.zsh-theme'
alias vg='vagrant global-status'
alias vs='vagrant status'
alias vup='vagrant up && vagrant ssh'
alias zz="vim $PROFILE_PATH/omz/zshrc.custom"

# ansible
export ANSIBLE_CALLBACK_WHITELIST="profile_tasks, timer"
export ANSIBLE_LOAD_CALLBACK_PLUGINS=True
# export ANSIBLE_STDOUT_CALLBACK=debug
export ANSIBLE_STDOUT_CALLBACK=yaml # 2.5 or later
export ANSIBLE_VERBOSITY=1
alias ansible-playbook-debug='ANSIBLE_STDOUT_CALLBACK=dense ansible-playbook'
alias ansible-playbook-dense='ANSIBLE_STDOUT_CALLBACK=dense ansible-playbook'
alias ansible-playbook-yaml='ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook'

# git
alias gb='git rev-parse --abbrev-ref HEAD'
alias gbl='git branch --list --sort=creatordate'
alias gblame=gitBlameSort
alias gl='git --no-pager log --oneline -25'
alias glo='git log --oneline --decorate'
alias gpf='gp -f'

# kubernetes
alias k='kubectl'
alias ka='k apply -f'
alias kc='k cluster-info'
alias kcc='k config current-context'
alias kcg='k config get-contexts'
alias kcu='k config use-context'
alias kd='k describe'
alias kg='k get'
alias kga='k get all -A'
alias kgd='k get deployments --output=wide'
alias kgn='k get namespaces --output=wide'
alias kgp='k get pods --output=wide'
alias kge='k get events'
alias kgs='k get services --output=wide'
alias kgsc='k get storageclasses --output=wide'
alias kns='kubens'
alias kx='kubectx'
alias stern='stern --timestamps'

# MacOS
alias fixaudio='sudo launchctl stop com.apple.audio.coreaudiod'
alias iCloudStatus='brctl log --wait --shorten'
alias fixAppStoreApps='killall -KILL storeaccountd'
alias iftop='sudo /usr/local/sbin/iftop -P'
alias ips='curl http://ipinfo.io/ip; ifconfig| grep -w inet'
alias preview='open /Applications/Preview.app '
alias zupdate='upgrade_oh_my_zsh'

# terraform
export AWS_DEFAULT_REGION='us-east-1'
export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"
export TERRAGRUNT_DOWNLOAD="$HOME/.terraform.d/terragrunt-tmp"
export TERRAGRUNT_SOURCE_UPDATE='true'
alias t='terraform'
alias tg='terragrunt'

# additional stuff
for k in ~/.keyfile-*(N); do source $k; done

# iterm2 shell integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
