### additional profile settings

# DEBUG_TIME_TEST=true PREVIOUS_TIME=0 # uncomment this to speedtest
time_test "[$(basename -- "${(%):-%x}")] loading additional settings"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
time_test "[$(basename -- "${(%):-%x}")] p10k cache"

export TERM="xterm-256color"

# configure homebrew influx metrics
export HOMEBREW_ANALYTICS_DEBUG=1 \
  HOMEBREW_NO_ANALYTICS=1 \
  HOMEBREW_AUTO_UPDATE_SECS=43200 \
  HOMEBREW_NO_INSTALL_UPGRADE=1

# custom PATH stuff
export PREVIOUS_PATH="$PATH" # needed for reloadZsh

PRE_PATHS=(
  /usr/local/bin
  /usr/local/sbin
  /opt/homebrew/bin
  /opt/homebrew/sbin
)

POST_PATHS=(
  "${HOME}/.local/bin"
  "${HOME}/scripts"
  "${PROFILE_PATH}/scripts"
  "${HOME}/.lmstudio/bin"
  "${HOME}/.iterm2"
  /usr/libexec
  /usr/syno/bin
  /usr/syno/sbin
)

# add paths that need to take priority unless already added
for folder in "${PRE_PATHS[@]}"; do
  if [ -d "$folder" ]; then
    grep -wq "${folder}" <<< "${PATH}" || export PATH="${folder}:${PATH}"
  fi
done

# add paths with lower priority unless already added
for folder in "${POST_PATHS[@]}"; do
  if [ -d "$folder" ]; then
    grep -wq "${folder}" <<< "${PATH}" || export PATH="$PATH:${folder}"
  fi
done

[ -x "$(command -v brew)" ] && BREW_PREFIX="$(brew --prefix)"

# determine Mac or Linux OS
UNAME_SYSTEM=$(uname -s)
# linux specific
if [ "$UNAME_SYSTEM" = Linux ]; then
    CURRENT_USER=$(id -un)
    if [ "$CURRENT_USER" != "root" ]; then
        alias apt='sudo apt'
    fi
    alias apts='apt search'
    alias ls='ls --color=always'
    LS_COLORS+=':ow=01;33'

# mac specific
elif [ "$UNAME_SYSTEM" = Darwin ]; then
    alias fixaudio='sudo launchctl stop com.apple.audio.coreaudiod'
    alias fixAppStoreApps='killall -KILL storeaccountd'
    alias iCloudStatus='brctl log --wait --shorten'
    alias iftop='sudo iftop -P'
    alias ips='curl http://ipinfo.io/ip; ifconfig| grep -w inet'
    alias ls='gls --color=always'
    alias preview='open /Applications/Preview.app '
    alias zupdate='upgrade_oh_my_zsh'
    HOMEBREW_NO_INSTALL_CLEANUP=true
fi

# asdf
if [ -e "$HOME/.asdf/asdf.sh" ]; then
    . "$HOME"/.asdf/asdf.sh
    fpath+=("${ASDF_DIR}/completions")
    autoload -Uz compinit && compinit
    time_test "[$(basename -- "${(%):-%x}")] loaded asdf"
fi

# ruby environment
if [ -e "$BREW_PREFIX/bin/rbenv" ] || [ -e "$HOME/.rbenv/bin/rbenv" ]; then
    export RBENV_ROOT="$HOME/.rbenv"
    export PATH="$RBENV_ROOT/bin:$PATH"
    eval "$(rbenv init -)"
    time_test "[$(basename -- "${(%):-%x}")] loaded rbenv"
fi

# python environment
if [ -e "$BREW_PREFIX/bin/pyenv" ] || [ -e "$HOME/.pyenv/bin/pyenv" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    # eval "$(pyenv init --path --no-reshash)"
    # eval "$(pyenv init --no-reshash -)"
    eval "$(pyenv init -)"
    # eval "$(pyenv virtualenv-init -)"
    time_test "[$(basename -- "${(%):-%x}")] loaded pyenv"
fi

# go environment
if [ -e "$BREW_PREFIX/bin/go" ] || [ -e "/usr/bin/go" ]; then
    export GOPATH="$HOME/go"
    PATH="$GOPATH/bin:$PATH"
    time_test "[$(basename -- "${(%):-%x}")] loaded golang "
fi

# node.js environment
if [ -x "$(command -v fnm)" ]; then
    eval "$(fnm env --use-on-cd)" > /dev/null 2>&1
    source <(fnm completions --shell zsh)
    export FNM_LOGLEVEL=quiet # disables "Using Node" when changing into dir
    time_test "[$(basename -- "${(%):-%x}")] loaded fnm"
fi

# handles special characters from links/urls
DISABLE_MAGIC_FUNCTIONS=true
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
# legacy fix
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# Bash-like navigation (alt left/right forward-word like bash)
# http://stackoverflow.com/questions/10847255/how-to-make-zsh-forward-word-behaviour-same-as-in-bash-emacs (man zshall)
autoload -U select-word-style
select-word-style bash
# bindkey mappings for zsh
# bindkey -v # vim mode
bindkey "^[OF" end-of-line
bindkey "^[OH" beginning-of-line
bindkey "^[OA" up-line-or-beginning-search
bindkey "^[OB" down-line-or-beginning-search
bindkey "^?" backward-delete-char
bindkey "^[[3~" delete-char
bindkey "^W" backward-kill-word
bindkey "^[^H" backward-kill-word
bindkey "^[B" backward-word
bindkey "^[F" forward-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "^[b" emacs-backward-word
bindkey "^[d" kill-word
bindkey "^[f" emacs-forward-word
bindkey "^[^?" backward-kill-word
bindkey "^[D" kill-word
bindkey "^[d" kill-word
bindkey "^[w" kill-region
bindkey "^[^[OA" up-line-or-beginning-search # fix for escape/up arrow annoyance
bindkey "^R" history-incremental-search-backward

export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export LC_CTYPE="UTF-8"
export EDITOR="vim"
export QUOTING_STYLE=literal
export RIPGREP_CONFIG_PATH=$PROFILE_PATH/ripgreprc

# hashicorp vault autocomplete
complete -o nospace -C "$(command -v vault)" vault

# Vagrant / VirtualBox
# https://www.vagrantup.com/docs/other/environmental-variables.html
export VAGRANT_HOME="$HOME/.Vagrant" # (default location: ~/.vagrant.d)
[ -d "$VAGRANT_HOME" ] || mkdir -p "$VAGRANT_HOME" # create if path doesn't exist
# export VAGRANT_DEBUG_LAUNCHER="1" # outputs debugging
# export VAGRANT_DEFAULT_PROVIDER="virtualbox"

# functions
awkp(){
    # search returns paragraph around line with search value
    if [ "$2" ]; then
        awk -v RS= "/$1/" "$2"
    else
        echo "use: awkp <thing_to_search> </path/to/file>"
    fi
}

dateNow(){ date +%Y%m%d_%H%M%S; }

digs() { dig "$1" +short; }

gitBlameSort(){
    if [ "${1}" ]; then
        git blame "${1}" | sort -rbk 3 | less
    else
        echo "e.g. $0 /path/to/file"
    fi
}

peruseHistory ()
{
    if [ ! "$1" ]; then
        fc -il 1
    elif [ "$1" = '-l' ]; then
        fc -il 1 | grep "$2" | less
    else
        fc -il 1 | grep "$1"
    fi
}

python_http_server() { python -m SimpleHTTPServer; }

reloadZsh(){
  unalias -a # remove all aliases
  PATH=$PREVIOUS_PATH
  ZSH_AUTOSUGGEST_CLEAR_WIDGETS="$ZSH_AUTOSUGGEST_CLEAR_WIDGETS_PREVIOUS"
  if [[ ${DEBUG_TIME_TEST} == true ]]; then # for debug time_test
    PREVIOUS_TIME=0
    typeset -F SECONDS && PREVIOUS_TIME=0
  fi
  source -- "${(%):-%x}"
  ### debug ###
  if [[ ${DEBUG_TIME_TEST} == true ]] then;
    echo "[FULL] ${TOTAL_TIME} [$(basename -- "${(%):-%x}")]"
  fi
}

shellcheck_lookup(){
    # https://github.com/koalaman/shellcheck/issues/2413#issuecomment-995208807
    [[ -z "$1" ]] && echo "No Issue provided" && return 1
    [[ ! "$1" =~ ^SC[0-9]{4}$ ]] && echo "Not a valid Issue" && return 1

    curl --url  "https://raw.githubusercontent.com/wiki/koalaman/shellcheck/$1.md" # Pipe this into your favourite md viewer
}

# aliases
if [ -x "$(command -v lvim)" ]; then
    EDITOR="lvim"; export EDITOR
elif [ -x "$(command -v nvim)" ]; then
    EDITOR="nvim"; export EDITOR
fi
alias vim='$EDITOR'
VISUAL="$EDITOR"; export VISUAL

alias C='cd ~/code'
alias D='cd ~/development'
alias N='cd ~/notes'
alias P='cd $PROFILE_PATH'
alias S='cd ~/scripts'
alias 1p='source op_session.sh'
alias ack='ack --ackrc $PROFILE_PATH/ackrc'
alias ackg='ack -g' # check filenames for pattern
alias ackgw='ackg -w' # words mode, pattern can't be in another word
alias ackp=awkp # [FUNC] search returns paragraph around line with search value
alias acks='ack --noignore-dir=is:submodules/,tmp/,scott/' # will search submodules
alias acksg='acks -g' # filenames only, will search submodules
alias ackw='ack -w' # words mode, pattern can't be in another word
alias bz='bunzip2'
alias clr='clear'
alias compose='docker compose'
alias cp='cp -a'
alias df='df -h'
alias dud='du -d 1 -h'
alias grep='grep -i --color=auto' # (case insensitive, color output)
alias hist='peruseHistory'
alias hl='peruseHistory -l'
alias hh='sudo -E $EDITOR /etc/hosts'
alias htop='sudo htop'
alias l.='ls -dh .*'
alias ll.='ls -ldh .*'
alias llt='ll -tr'
alias man=betterman
alias opencode='opencode --continue' o='opencode'
alias publicip='dig +short myip.opendns.com @resolver1.opendns.com'
alias rgl='rg --files-with-matches' # print filenames with contents that match
alias rgg='rg --files | rg' # match part of filename
alias rggw='rg --files | rg --word-regexp' # match filenames explicit words
alias rgw='rg --word-regexp' # match explicit words
alias rgt='rg --glob' # specify <fileype> then <match>
alias rgtw='rgw --word-regexp --glob' # specify <fileype> then explicit <match>
alias rr='rsync -avhP'
alias scr='screen -dR'
alias vi='vim'
alias vv='vim $PROFILE_PATH/vim/config.lua'
alias zz='vim $PROFILE_PATH/omz/zshrc.custom'

# ansible
# export ANSIBLE_CONFIG="$PROFILE_PATH/ansible.cfg"
# alias ansible-lint='ansible-lint -c $PROFILE_PATH/_ansible-lint'
# export ANSIBLE_CALLBACK_WHITELIST="profile_tasks, timer"
# export ANSIBLE_LOAD_CALLBACK_PLUGINS=True
# export ANSIBLE_STDOUT_CALLBACK=debug
# export ANSIBLE_STDOUT_CALLBACK=yaml # 2.5 or later
# export ANSIBLE_VERBOSITY=1
# alias ansible-playbook-debug='ANSIBLE_STDOUT_CALLBACK=dense ansible-playbook'
# alias ansible-playbook-dense='ANSIBLE_STDOUT_CALLBACK=dense ansible-playbook'
# alias ansible-playbook-yaml='ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook'

# docker
export BUILDKIT_PROGRESS=plain

# git
alias gb='git rev-parse --abbrev-ref HEAD'
alias gbl='git branch --list --sort=creatordate -vv'
alias gblame=gitBlameSort
alias gl='git --no-pager log --oneline -25'
alias glo='git log --oneline --decorate'
alias gpf='gp -f'

# kubernetes
alias k='kubectl'
alias ka='k apply -f'
alias kc='k cluster-info'
alias kcc='k config current-context'
alias kcg='k config get-contexts'
alias kcu='k config use-context'
alias kd='k describe'
alias kdp='k describe pod'
alias kg='k get'
alias kga='k get all'
alias kgd='k get deployments --output=wide'
alias kgn='k get nodes'
alias kgp='k get pods --output=wide'
alias kge='k get events'
alias kgs='k get services --output=wide'
alias kgsc='k get storageclasses --output=wide'
alias kns='kubens'
alias kx='kubectx'
# alias stern='stern --timestamps'
[ -x "$(command -v kubectl)" ] \
  && source <(kubectl completion zsh) \
  && time_test "[$(basename -- "${(%):-%x}")] loaded kubectl completion"
[ -x "$(command -v helm)" ] \
  && source <(helm completion zsh) \
  && time_test "[$(basename -- "${(%):-%x}")] loaded helm completion"

# terraform
[ -d "$HOME/.terraform.d/TF_PLUGIN_CACHE_DIR" ] || \
  mkdir -p "$HOME/.terraform.d/TF_PLUGIN_CACHE_DIR"
export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/TF_PLUGIN_CACHE_DIR"
# export TF_DATA_DIR="$HOME/.terraform.d/TF_DATA_DIR${PWD}" # this dir needs to exist first, needs to be fixed
# export TERRAGRUNT_DOWNLOAD="$HOME/.terraform.d/terragrunt-tmp"
# the following requires tfenv install <version>; tfenv use <version>
if [ -x "$(command -v tfenv)" ] && [ -x "$(command -v terraform)" ]; then \
  TFENV_COMPLETION_PATH="$(readlink -f "$(command -v tfenv)" | cut -d/ -f-6)"
  TF_VERSION="$(cat "$TFENV_COMPLETION_PATH"/version)"
  complete -o nospace -C "${TFENV_COMPLETION_PATH}/versions/${TF_VERSION}/terraform" terraform
  time_test "[$(basename -- "${(%):-%x}")] loaded terraform completion "
fi

# needed for autocomplete (terraform and hashicorp vault)
autoload -U +X bashcompinit && bashcompinit

# fix https://github.com/zsh-users/zsh-autosuggestions/issues/351#issuecomment-515415202
ZSH_AUTOSUGGEST_CLEAR_WIDGETS_PREVIOUS="${ZSH_AUTOSUGGEST_CLEAR_WIDGETS[*]}" # needed for reloadZsh
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(bracketed-paste accept-line)
source "${PROFILE_PATH}/omz/fix-autosuggest-paste-speed"

# additional stuff
setopt nullglob # prevent errors for unmatched glob patterns
for k in ~/.keyfile-*; do source "$k"; done
setopt nomatch

# use fzf (ctrl-t)
if [[ -x "$(command -v fzf)" ]] && echo "${SHELL}" | grep zsh >/dev/null 2>&1; then
  eval "$(fzf --zsh)"
elif [ -f "${HOME}/.fzf.zsh" ]; then
  source "${HOME}/.fzf.zsh"
fi

# vscodium
if command -v codium &> /dev/null && ! command -v code &> /dev/null; then
  alias code='codium'
fi

# continue.dev cn cli
export CONTINUE_ALLOW_ANONYMOUS_TELEMETRY=0
alias cn='cn --config ~/.continue/config.yaml'

# iterm2 shell integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
time_test "[$(basename -- "${(%):-%x}")] loaded iterm2 shell integration"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f $PROFILE_PATH/_p10k.zsh ]] || source $PROFILE_PATH/_p10k.zsh
time_test "[$(basename -- "${(%):-%x}")] p10k loaded"
