---
# designed for bento/ubuntu-18.04
- name: apt | install packages
  become: true
  apt:
    name:
      - ack
      - build-essential
      - cmake
      - curl
      - dkms
      - fail2ban
      - golang
      - htop
      - libbz2-dev
      - libncurses5-dev
      - libncursesw5-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - linux-headers-{{ ansible_kernel }}
      - llvm
      - make
      - mono-complete
      - python-pexpect
      - python3-dev
      - rake
      - tk-dev
      - vim-nox
      - wget
      - xz-utils
      - zlib1g-dev
      - zsh

- name: user | create required directories
  file:
    path: "$HOME/{{ item }}"
    state: directory
  with_items:
    - 'development'
    - '.config/yamllint'
    - '.vim/_temp'

- name: user | clone profile
  git:
    repo: 'https://github.com/scottrbaxter/profile.git'
    dest: '$HOME/development/profile'
    version: "{{ profile_version }}"

- name: omz | install oh-my-zsh
  git:
    repo: 'https://github.com/robbyrussell/oh-my-zsh.git'
    dest: '$HOME/.oh-my-zsh'
    version: "{{ git_version }}"

- name: omz | change shell
  become: true
  user:
    name: vagrant
    shell: /bin/zsh

- name: vim | vundle
  git:
    repo: 'https://github.com/VundleVim/Vundle.vim.git'
    dest: '$HOME/.vim/bundle/Vundle.vim'
    version: '{{ git_version }}'

- name: user | profile symlinks
  file:
    src: '$HOME/development/profile/{{ item.src }}'
    path: '$HOME/{{ item.dest }}'
    state: link
    force: true
  with_items:
    - {src: '_gitconfig', dest: '.gitconfig'}
    - {src: '_gitignore_global', dest: '.gitignore_global'}
    - {src: '_vimrc', dest: '.vimrc'}
    - {src: 'hadolint.yaml', dest: '~/.config/hadolint.yaml'}
    - {src: 'omz/_zshrc', dest: '.zshrc'}
    - {src: 'yamllint_config', dest: '.config/yamllint/config'}

- name: vim | Vundle Install
  shell: vim -E -s -c "source $HOME/.vimrc" -c PluginInstall -c qa
  register: vundle_install
  failed_when: vundle_install.rc >= 2
  changed_when: False

- name: python | git clone pyenv
  git:
    dest: "{{ item.value.dest }}"
    repo: "{{ item.value.repo }}"
    version: "{{ item.value.version }}"
  with_dict:
    pyenv:
      repo: 'https://github.com/pyenv/pyenv.git'
      version: "{{ git_version }}"
      dest: '$HOME/.pyenv'
    pyenv-virtualenv:
      repo: 'https://github.com/pyenv/pyenv-virtualenv.git'
      version: "{{ git_version }}"
      dest: '$HOME/.pyenv/plugins/pyenv-virtualenv'

- name: python | install
  shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    env PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install "{{ python_version }}"
    pyenv global "{{ python_version }}"
    pip install --upgrade pip
  args:
    creates: "$HOME/.pyenv/versions/{{ python_version }}/bin/python"

- name: python | pip packages
  shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    pip install ansible ansible-lint autopep8 ipython isort flake8 yamllint yapf

- name: npm | install
  shell: >
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
  args:
    executable: /bin/bash
    chdir: "{{ ansible_env.HOME }}"
    creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

- name: node | install
  shell: >
    . {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install {{ item }}
  args:
    executable: /bin/bash
    chdir: "{{ ansible_env.HOME }}"
    creates: "{{ ansible_env.HOME }}/.nvm/versions/{{ item }}"
  loop:
    - node

- name: ycm | install
  shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    python3 install.py \
      --clangd-completer \
      --clang-completer \
      --ts-completer \
      --go-completer
  args:
    chdir: ~/.vim/bundle/YouCompleteMe
    creates: $HOME/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so
  register: ycm_install
  failed_when: ycm_install.rc >= 2
